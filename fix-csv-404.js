// Comprehensive fix and test script for CSV 404 error\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('🔧 CSV 404 Error Fix Script');\nconsole.log('=' .repeat(50));\n\n// 1. Check CSV file\nconsole.log('\\n1. Checking CSV file...');\nconst csvFilePath = path.join(__dirname, 'jobs_data.csv');\nif (fs.existsSync(csvFilePath)) {\n    const stats = fs.statSync(csvFilePath);\n    console.log('✅ CSV file exists');\n    console.log(`   Size: ${(stats.size / 1024).toFixed(2)} KB`);\n    console.log(`   Path: ${csvFilePath}`);\n} else {\n    console.log('❌ CSV file not found');\n    console.log(`   Expected path: ${csvFilePath}`);\n}\n\n// 2. Check dependencies\nconsole.log('\\n2. Checking dependencies...');\ntry {\n    require('csv-parser');\n    console.log('✅ csv-parser dependency available');\n} catch (error) {\n    console.log('❌ csv-parser dependency missing');\n    console.log('   Run: npm install csv-parser');\n}\n\n// 3. Check backend files\nconsole.log('\\n3. Checking backend files...');\nconst filesToCheck = [\n    'backend_new/services/csvJobParserService.js',\n    'backend_new/controller/adminController.js',\n    'backend_new/routes/adminRoutes.js',\n    'backend_new/middleware/auth.js',\n    'backend_new/Model/Job.js'\n];\n\nfilesToCheck.forEach(file => {\n    if (fs.existsSync(file)) {\n        console.log(`✅ ${file}`);\n    } else {\n        console.log(`❌ ${file} - MISSING`);\n    }\n});\n\n// 4. Check route registration in index.js\nconsole.log('\\n4. Checking route registration...');\ntry {\n    const indexContent = fs.readFileSync('backend_new/index.js', 'utf8');\n    if (indexContent.includes('adminRoutes')) {\n        console.log('✅ Admin routes imported in index.js');\n    } else {\n        console.log('❌ Admin routes not imported in index.js');\n    }\n    \n    if (indexContent.includes('/api/admin/management')) {\n        console.log('✅ Admin routes registered at /api/admin/management');\n    } else if (indexContent.includes('/api/admin')) {\n        console.log('⚠️  Admin routes registered at /api/admin (may conflict)');\n    } else {\n        console.log('❌ Admin routes not registered');\n    }\n} catch (error) {\n    console.log('❌ Could not read index.js');\n}\n\n// 5. Check frontend API configuration\nconsole.log('\\n5. Checking frontend API configuration...');\ntry {\n    const apiContent = fs.readFileSync('frontend_new/src/api.js', 'utf8');\n    if (apiContent.includes('/admin/management/csv-jobs')) {\n        console.log('✅ Frontend API configured for /admin/management endpoints');\n    } else if (apiContent.includes('/admin/csv-jobs')) {\n        console.log('⚠️  Frontend API configured for /admin endpoints (may need update)');\n    } else {\n        console.log('❌ Frontend API not configured for admin endpoints');\n    }\n} catch (error) {\n    console.log('❌ Could not read frontend api.js');\n}\n\n// 6. Test CSV parsing\nconsole.log('\\n6. Testing CSV parsing...');\ntry {\n    const csvService = require('./backend_new/services/csvJobParserService');\n    console.log('✅ CSV service loaded successfully');\n    \n    // Test file path\n    const servicePath = csvService.csvFilePath || path.join(__dirname, 'backend_new/services', '../../jobs_data.csv');\n    console.log(`   Service CSV path: ${servicePath}`);\n    \n    if (fs.existsSync(servicePath)) {\n        console.log('✅ CSV service can access file');\n    } else {\n        console.log('❌ CSV service cannot access file');\n        console.log('   This is likely the cause of the 404 error');\n    }\n} catch (error) {\n    console.log('❌ CSV service loading error:', error.message);\n}\n\n// 7. Summary and recommendations\nconsole.log('\\n7. Summary and Recommendations:');\nconsole.log('=' .repeat(50));\n\nconst recommendations = [];\n\nif (!fs.existsSync(csvFilePath)) {\n    recommendations.push('• Place jobs_data.csv in the project root directory');\n}\n\ntry {\n    require('csv-parser');\n} catch {\n    recommendations.push('• Install csv-parser: npm install csv-parser');\n}\n\nif (!fs.existsSync('backend_new/routes/adminRoutes.js')) {\n    recommendations.push('• Create adminRoutes.js file');\n}\n\nif (recommendations.length === 0) {\n    console.log('✅ All components appear to be in place');\n    console.log('\\nNext steps:');\n    console.log('1. Start the backend server: cd backend_new && npm start');\n    console.log('2. Check server logs for any startup errors');\n    console.log('3. Test the endpoint: GET http://localhost:5000/api/admin/management/csv-jobs');\n    console.log('4. Ensure you have admin authentication token');\n} else {\n    console.log('❌ Issues found:');\n    recommendations.forEach(rec => console.log(rec));\n}\n\nconsole.log('\\n🏁 Fix script completed');"